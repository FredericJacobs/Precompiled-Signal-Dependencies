// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "WhisperTextProtocol.pb.h"
// @@protoc_insertion_point(imports)

@implementation WhisperTextProtocolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WhisperTextProtocolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TSProtoWhisperMessage ()
@property (strong) NSData* ratchetKey;
@property UInt32 counter;
@property UInt32 previousCounter;
@property (strong) NSData* ciphertext;
@end

@implementation TSProtoWhisperMessage

- (BOOL) hasRatchetKey {
  return !!hasRatchetKey_;
}
- (void) setHasRatchetKey:(BOOL) value_ {
  hasRatchetKey_ = !!value_;
}
@synthesize ratchetKey;
- (BOOL) hasCounter {
  return !!hasCounter_;
}
- (void) setHasCounter:(BOOL) value_ {
  hasCounter_ = !!value_;
}
@synthesize counter;
- (BOOL) hasPreviousCounter {
  return !!hasPreviousCounter_;
}
- (void) setHasPreviousCounter:(BOOL) value_ {
  hasPreviousCounter_ = !!value_;
}
@synthesize previousCounter;
- (BOOL) hasCiphertext {
  return !!hasCiphertext_;
}
- (void) setHasCiphertext:(BOOL) value_ {
  hasCiphertext_ = !!value_;
}
@synthesize ciphertext;
- (id) init {
  if ((self = [super init])) {
    self.ratchetKey = [NSData data];
    self.counter = 0;
    self.previousCounter = 0;
    self.ciphertext = [NSData data];
  }
  return self;
}
static TSProtoWhisperMessage* defaultTSProtoWhisperMessageInstance = nil;
+ (void) initialize {
  if (self == [TSProtoWhisperMessage class]) {
    defaultTSProtoWhisperMessageInstance = [[TSProtoWhisperMessage alloc] init];
  }
}
+ (TSProtoWhisperMessage*) defaultInstance {
  return defaultTSProtoWhisperMessageInstance;
}
- (TSProtoWhisperMessage*) defaultInstance {
  return defaultTSProtoWhisperMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRatchetKey) {
    [output writeData:1 value:self.ratchetKey];
  }
  if (self.hasCounter) {
    [output writeUInt32:2 value:self.counter];
  }
  if (self.hasPreviousCounter) {
    [output writeUInt32:3 value:self.previousCounter];
  }
  if (self.hasCiphertext) {
    [output writeData:4 value:self.ciphertext];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRatchetKey) {
    size_ += computeDataSize(1, self.ratchetKey);
  }
  if (self.hasCounter) {
    size_ += computeUInt32Size(2, self.counter);
  }
  if (self.hasPreviousCounter) {
    size_ += computeUInt32Size(3, self.previousCounter);
  }
  if (self.hasCiphertext) {
    size_ += computeDataSize(4, self.ciphertext);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TSProtoWhisperMessage*) parseFromData:(NSData*) data {
  return (TSProtoWhisperMessage*)[[[TSProtoWhisperMessage builder] mergeFromData:data] build];
}
+ (TSProtoWhisperMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoWhisperMessage*)[[[TSProtoWhisperMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TSProtoWhisperMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TSProtoWhisperMessage*)[[[TSProtoWhisperMessage builder] mergeFromInputStream:input] build];
}
+ (TSProtoWhisperMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoWhisperMessage*)[[[TSProtoWhisperMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoWhisperMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TSProtoWhisperMessage*)[[[TSProtoWhisperMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TSProtoWhisperMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoWhisperMessage*)[[[TSProtoWhisperMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoWhisperMessageBuilder*) builder {
  return [[TSProtoWhisperMessageBuilder alloc] init];
}
+ (TSProtoWhisperMessageBuilder*) builderWithPrototype:(TSProtoWhisperMessage*) prototype {
  return [[TSProtoWhisperMessage builder] mergeFrom:prototype];
}
- (TSProtoWhisperMessageBuilder*) builder {
  return [TSProtoWhisperMessage builder];
}
- (TSProtoWhisperMessageBuilder*) toBuilder {
  return [TSProtoWhisperMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRatchetKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratchetKey", self.ratchetKey];
  }
  if (self.hasCounter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"counter", [NSNumber numberWithInteger:self.counter]];
  }
  if (self.hasPreviousCounter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previousCounter", [NSNumber numberWithInteger:self.previousCounter]];
  }
  if (self.hasCiphertext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciphertext", self.ciphertext];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TSProtoWhisperMessage class]]) {
    return NO;
  }
  TSProtoWhisperMessage *otherMessage = other;
  return
      self.hasRatchetKey == otherMessage.hasRatchetKey &&
      (!self.hasRatchetKey || [self.ratchetKey isEqual:otherMessage.ratchetKey]) &&
      self.hasCounter == otherMessage.hasCounter &&
      (!self.hasCounter || self.counter == otherMessage.counter) &&
      self.hasPreviousCounter == otherMessage.hasPreviousCounter &&
      (!self.hasPreviousCounter || self.previousCounter == otherMessage.previousCounter) &&
      self.hasCiphertext == otherMessage.hasCiphertext &&
      (!self.hasCiphertext || [self.ciphertext isEqual:otherMessage.ciphertext]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRatchetKey) {
    hashCode = hashCode * 31 + [self.ratchetKey hash];
  }
  if (self.hasCounter) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.counter] hash];
  }
  if (self.hasPreviousCounter) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.previousCounter] hash];
  }
  if (self.hasCiphertext) {
    hashCode = hashCode * 31 + [self.ciphertext hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TSProtoWhisperMessageBuilder()
@property (strong) TSProtoWhisperMessage* result;
@end

@implementation TSProtoWhisperMessageBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TSProtoWhisperMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TSProtoWhisperMessageBuilder*) clear {
  self.result = [[TSProtoWhisperMessage alloc] init];
  return self;
}
- (TSProtoWhisperMessageBuilder*) clone {
  return [TSProtoWhisperMessage builderWithPrototype:result];
}
- (TSProtoWhisperMessage*) defaultInstance {
  return [TSProtoWhisperMessage defaultInstance];
}
- (TSProtoWhisperMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TSProtoWhisperMessage*) buildPartial {
  TSProtoWhisperMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TSProtoWhisperMessageBuilder*) mergeFrom:(TSProtoWhisperMessage*) other {
  if (other == [TSProtoWhisperMessage defaultInstance]) {
    return self;
  }
  if (other.hasRatchetKey) {
    [self setRatchetKey:other.ratchetKey];
  }
  if (other.hasCounter) {
    [self setCounter:other.counter];
  }
  if (other.hasPreviousCounter) {
    [self setPreviousCounter:other.previousCounter];
  }
  if (other.hasCiphertext) {
    [self setCiphertext:other.ciphertext];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TSProtoWhisperMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TSProtoWhisperMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRatchetKey:[input readData]];
        break;
      }
      case 16: {
        [self setCounter:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPreviousCounter:[input readUInt32]];
        break;
      }
      case 34: {
        [self setCiphertext:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRatchetKey {
  return result.hasRatchetKey;
}
- (NSData*) ratchetKey {
  return result.ratchetKey;
}
- (TSProtoWhisperMessageBuilder*) setRatchetKey:(NSData*) value {
  result.hasRatchetKey = YES;
  result.ratchetKey = value;
  return self;
}
- (TSProtoWhisperMessageBuilder*) clearRatchetKey {
  result.hasRatchetKey = NO;
  result.ratchetKey = [NSData data];
  return self;
}
- (BOOL) hasCounter {
  return result.hasCounter;
}
- (UInt32) counter {
  return result.counter;
}
- (TSProtoWhisperMessageBuilder*) setCounter:(UInt32) value {
  result.hasCounter = YES;
  result.counter = value;
  return self;
}
- (TSProtoWhisperMessageBuilder*) clearCounter {
  result.hasCounter = NO;
  result.counter = 0;
  return self;
}
- (BOOL) hasPreviousCounter {
  return result.hasPreviousCounter;
}
- (UInt32) previousCounter {
  return result.previousCounter;
}
- (TSProtoWhisperMessageBuilder*) setPreviousCounter:(UInt32) value {
  result.hasPreviousCounter = YES;
  result.previousCounter = value;
  return self;
}
- (TSProtoWhisperMessageBuilder*) clearPreviousCounter {
  result.hasPreviousCounter = NO;
  result.previousCounter = 0;
  return self;
}
- (BOOL) hasCiphertext {
  return result.hasCiphertext;
}
- (NSData*) ciphertext {
  return result.ciphertext;
}
- (TSProtoWhisperMessageBuilder*) setCiphertext:(NSData*) value {
  result.hasCiphertext = YES;
  result.ciphertext = value;
  return self;
}
- (TSProtoWhisperMessageBuilder*) clearCiphertext {
  result.hasCiphertext = NO;
  result.ciphertext = [NSData data];
  return self;
}
@end

@interface TSProtoPreKeyWhisperMessage ()
@property UInt32 registrationId;
@property UInt32 preKeyId;
@property UInt32 signedPreKeyId;
@property (strong) NSData* baseKey;
@property (strong) NSData* identityKey;
@property (strong) NSData* message;
@end

@implementation TSProtoPreKeyWhisperMessage

- (BOOL) hasRegistrationId {
  return !!hasRegistrationId_;
}
- (void) setHasRegistrationId:(BOOL) value_ {
  hasRegistrationId_ = !!value_;
}
@synthesize registrationId;
- (BOOL) hasPreKeyId {
  return !!hasPreKeyId_;
}
- (void) setHasPreKeyId:(BOOL) value_ {
  hasPreKeyId_ = !!value_;
}
@synthesize preKeyId;
- (BOOL) hasSignedPreKeyId {
  return !!hasSignedPreKeyId_;
}
- (void) setHasSignedPreKeyId:(BOOL) value_ {
  hasSignedPreKeyId_ = !!value_;
}
@synthesize signedPreKeyId;
- (BOOL) hasBaseKey {
  return !!hasBaseKey_;
}
- (void) setHasBaseKey:(BOOL) value_ {
  hasBaseKey_ = !!value_;
}
@synthesize baseKey;
- (BOOL) hasIdentityKey {
  return !!hasIdentityKey_;
}
- (void) setHasIdentityKey:(BOOL) value_ {
  hasIdentityKey_ = !!value_;
}
@synthesize identityKey;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value_ {
  hasMessage_ = !!value_;
}
@synthesize message;
- (id) init {
  if ((self = [super init])) {
    self.registrationId = 0;
    self.preKeyId = 0;
    self.signedPreKeyId = 0;
    self.baseKey = [NSData data];
    self.identityKey = [NSData data];
    self.message = [NSData data];
  }
  return self;
}
static TSProtoPreKeyWhisperMessage* defaultTSProtoPreKeyWhisperMessageInstance = nil;
+ (void) initialize {
  if (self == [TSProtoPreKeyWhisperMessage class]) {
    defaultTSProtoPreKeyWhisperMessageInstance = [[TSProtoPreKeyWhisperMessage alloc] init];
  }
}
+ (TSProtoPreKeyWhisperMessage*) defaultInstance {
  return defaultTSProtoPreKeyWhisperMessageInstance;
}
- (TSProtoPreKeyWhisperMessage*) defaultInstance {
  return defaultTSProtoPreKeyWhisperMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPreKeyId) {
    [output writeUInt32:1 value:self.preKeyId];
  }
  if (self.hasBaseKey) {
    [output writeData:2 value:self.baseKey];
  }
  if (self.hasIdentityKey) {
    [output writeData:3 value:self.identityKey];
  }
  if (self.hasMessage) {
    [output writeData:4 value:self.message];
  }
  if (self.hasRegistrationId) {
    [output writeUInt32:5 value:self.registrationId];
  }
  if (self.hasSignedPreKeyId) {
    [output writeUInt32:6 value:self.signedPreKeyId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPreKeyId) {
    size_ += computeUInt32Size(1, self.preKeyId);
  }
  if (self.hasBaseKey) {
    size_ += computeDataSize(2, self.baseKey);
  }
  if (self.hasIdentityKey) {
    size_ += computeDataSize(3, self.identityKey);
  }
  if (self.hasMessage) {
    size_ += computeDataSize(4, self.message);
  }
  if (self.hasRegistrationId) {
    size_ += computeUInt32Size(5, self.registrationId);
  }
  if (self.hasSignedPreKeyId) {
    size_ += computeUInt32Size(6, self.signedPreKeyId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TSProtoPreKeyWhisperMessage*) parseFromData:(NSData*) data {
  return (TSProtoPreKeyWhisperMessage*)[[[TSProtoPreKeyWhisperMessage builder] mergeFromData:data] build];
}
+ (TSProtoPreKeyWhisperMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoPreKeyWhisperMessage*)[[[TSProtoPreKeyWhisperMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TSProtoPreKeyWhisperMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TSProtoPreKeyWhisperMessage*)[[[TSProtoPreKeyWhisperMessage builder] mergeFromInputStream:input] build];
}
+ (TSProtoPreKeyWhisperMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoPreKeyWhisperMessage*)[[[TSProtoPreKeyWhisperMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoPreKeyWhisperMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TSProtoPreKeyWhisperMessage*)[[[TSProtoPreKeyWhisperMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TSProtoPreKeyWhisperMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoPreKeyWhisperMessage*)[[[TSProtoPreKeyWhisperMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoPreKeyWhisperMessageBuilder*) builder {
  return [[TSProtoPreKeyWhisperMessageBuilder alloc] init];
}
+ (TSProtoPreKeyWhisperMessageBuilder*) builderWithPrototype:(TSProtoPreKeyWhisperMessage*) prototype {
  return [[TSProtoPreKeyWhisperMessage builder] mergeFrom:prototype];
}
- (TSProtoPreKeyWhisperMessageBuilder*) builder {
  return [TSProtoPreKeyWhisperMessage builder];
}
- (TSProtoPreKeyWhisperMessageBuilder*) toBuilder {
  return [TSProtoPreKeyWhisperMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPreKeyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preKeyId", [NSNumber numberWithInteger:self.preKeyId]];
  }
  if (self.hasBaseKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseKey", self.baseKey];
  }
  if (self.hasIdentityKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"identityKey", self.identityKey];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasRegistrationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"registrationId", [NSNumber numberWithInteger:self.registrationId]];
  }
  if (self.hasSignedPreKeyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signedPreKeyId", [NSNumber numberWithInteger:self.signedPreKeyId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TSProtoPreKeyWhisperMessage class]]) {
    return NO;
  }
  TSProtoPreKeyWhisperMessage *otherMessage = other;
  return
      self.hasPreKeyId == otherMessage.hasPreKeyId &&
      (!self.hasPreKeyId || self.preKeyId == otherMessage.preKeyId) &&
      self.hasBaseKey == otherMessage.hasBaseKey &&
      (!self.hasBaseKey || [self.baseKey isEqual:otherMessage.baseKey]) &&
      self.hasIdentityKey == otherMessage.hasIdentityKey &&
      (!self.hasIdentityKey || [self.identityKey isEqual:otherMessage.identityKey]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasRegistrationId == otherMessage.hasRegistrationId &&
      (!self.hasRegistrationId || self.registrationId == otherMessage.registrationId) &&
      self.hasSignedPreKeyId == otherMessage.hasSignedPreKeyId &&
      (!self.hasSignedPreKeyId || self.signedPreKeyId == otherMessage.signedPreKeyId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPreKeyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.preKeyId] hash];
  }
  if (self.hasBaseKey) {
    hashCode = hashCode * 31 + [self.baseKey hash];
  }
  if (self.hasIdentityKey) {
    hashCode = hashCode * 31 + [self.identityKey hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasRegistrationId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.registrationId] hash];
  }
  if (self.hasSignedPreKeyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.signedPreKeyId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TSProtoPreKeyWhisperMessageBuilder()
@property (strong) TSProtoPreKeyWhisperMessage* result;
@end

@implementation TSProtoPreKeyWhisperMessageBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TSProtoPreKeyWhisperMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clear {
  self.result = [[TSProtoPreKeyWhisperMessage alloc] init];
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clone {
  return [TSProtoPreKeyWhisperMessage builderWithPrototype:result];
}
- (TSProtoPreKeyWhisperMessage*) defaultInstance {
  return [TSProtoPreKeyWhisperMessage defaultInstance];
}
- (TSProtoPreKeyWhisperMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TSProtoPreKeyWhisperMessage*) buildPartial {
  TSProtoPreKeyWhisperMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TSProtoPreKeyWhisperMessageBuilder*) mergeFrom:(TSProtoPreKeyWhisperMessage*) other {
  if (other == [TSProtoPreKeyWhisperMessage defaultInstance]) {
    return self;
  }
  if (other.hasRegistrationId) {
    [self setRegistrationId:other.registrationId];
  }
  if (other.hasPreKeyId) {
    [self setPreKeyId:other.preKeyId];
  }
  if (other.hasSignedPreKeyId) {
    [self setSignedPreKeyId:other.signedPreKeyId];
  }
  if (other.hasBaseKey) {
    [self setBaseKey:other.baseKey];
  }
  if (other.hasIdentityKey) {
    [self setIdentityKey:other.identityKey];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TSProtoPreKeyWhisperMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPreKeyId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setBaseKey:[input readData]];
        break;
      }
      case 26: {
        [self setIdentityKey:[input readData]];
        break;
      }
      case 34: {
        [self setMessage:[input readData]];
        break;
      }
      case 40: {
        [self setRegistrationId:[input readUInt32]];
        break;
      }
      case 48: {
        [self setSignedPreKeyId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRegistrationId {
  return result.hasRegistrationId;
}
- (UInt32) registrationId {
  return result.registrationId;
}
- (TSProtoPreKeyWhisperMessageBuilder*) setRegistrationId:(UInt32) value {
  result.hasRegistrationId = YES;
  result.registrationId = value;
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clearRegistrationId {
  result.hasRegistrationId = NO;
  result.registrationId = 0;
  return self;
}
- (BOOL) hasPreKeyId {
  return result.hasPreKeyId;
}
- (UInt32) preKeyId {
  return result.preKeyId;
}
- (TSProtoPreKeyWhisperMessageBuilder*) setPreKeyId:(UInt32) value {
  result.hasPreKeyId = YES;
  result.preKeyId = value;
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clearPreKeyId {
  result.hasPreKeyId = NO;
  result.preKeyId = 0;
  return self;
}
- (BOOL) hasSignedPreKeyId {
  return result.hasSignedPreKeyId;
}
- (UInt32) signedPreKeyId {
  return result.signedPreKeyId;
}
- (TSProtoPreKeyWhisperMessageBuilder*) setSignedPreKeyId:(UInt32) value {
  result.hasSignedPreKeyId = YES;
  result.signedPreKeyId = value;
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clearSignedPreKeyId {
  result.hasSignedPreKeyId = NO;
  result.signedPreKeyId = 0;
  return self;
}
- (BOOL) hasBaseKey {
  return result.hasBaseKey;
}
- (NSData*) baseKey {
  return result.baseKey;
}
- (TSProtoPreKeyWhisperMessageBuilder*) setBaseKey:(NSData*) value {
  result.hasBaseKey = YES;
  result.baseKey = value;
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clearBaseKey {
  result.hasBaseKey = NO;
  result.baseKey = [NSData data];
  return self;
}
- (BOOL) hasIdentityKey {
  return result.hasIdentityKey;
}
- (NSData*) identityKey {
  return result.identityKey;
}
- (TSProtoPreKeyWhisperMessageBuilder*) setIdentityKey:(NSData*) value {
  result.hasIdentityKey = YES;
  result.identityKey = value;
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clearIdentityKey {
  result.hasIdentityKey = NO;
  result.identityKey = [NSData data];
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSData*) message {
  return result.message;
}
- (TSProtoPreKeyWhisperMessageBuilder*) setMessage:(NSData*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (TSProtoPreKeyWhisperMessageBuilder*) clearMessage {
  result.hasMessage = NO;
  result.message = [NSData data];
  return self;
}
@end

@interface TSProtoKeyExchangeMessage ()
@property UInt32 id;
@property (strong) NSData* baseKey;
@property (strong) NSData* ratchetKey;
@property (strong) NSData* identityKey;
@property (strong) NSData* baseKeySignature;
@end

@implementation TSProtoKeyExchangeMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasBaseKey {
  return !!hasBaseKey_;
}
- (void) setHasBaseKey:(BOOL) value_ {
  hasBaseKey_ = !!value_;
}
@synthesize baseKey;
- (BOOL) hasRatchetKey {
  return !!hasRatchetKey_;
}
- (void) setHasRatchetKey:(BOOL) value_ {
  hasRatchetKey_ = !!value_;
}
@synthesize ratchetKey;
- (BOOL) hasIdentityKey {
  return !!hasIdentityKey_;
}
- (void) setHasIdentityKey:(BOOL) value_ {
  hasIdentityKey_ = !!value_;
}
@synthesize identityKey;
- (BOOL) hasBaseKeySignature {
  return !!hasBaseKeySignature_;
}
- (void) setHasBaseKeySignature:(BOOL) value_ {
  hasBaseKeySignature_ = !!value_;
}
@synthesize baseKeySignature;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.baseKey = [NSData data];
    self.ratchetKey = [NSData data];
    self.identityKey = [NSData data];
    self.baseKeySignature = [NSData data];
  }
  return self;
}
static TSProtoKeyExchangeMessage* defaultTSProtoKeyExchangeMessageInstance = nil;
+ (void) initialize {
  if (self == [TSProtoKeyExchangeMessage class]) {
    defaultTSProtoKeyExchangeMessageInstance = [[TSProtoKeyExchangeMessage alloc] init];
  }
}
+ (TSProtoKeyExchangeMessage*) defaultInstance {
  return defaultTSProtoKeyExchangeMessageInstance;
}
- (TSProtoKeyExchangeMessage*) defaultInstance {
  return defaultTSProtoKeyExchangeMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasBaseKey) {
    [output writeData:2 value:self.baseKey];
  }
  if (self.hasRatchetKey) {
    [output writeData:3 value:self.ratchetKey];
  }
  if (self.hasIdentityKey) {
    [output writeData:4 value:self.identityKey];
  }
  if (self.hasBaseKeySignature) {
    [output writeData:5 value:self.baseKeySignature];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasBaseKey) {
    size_ += computeDataSize(2, self.baseKey);
  }
  if (self.hasRatchetKey) {
    size_ += computeDataSize(3, self.ratchetKey);
  }
  if (self.hasIdentityKey) {
    size_ += computeDataSize(4, self.identityKey);
  }
  if (self.hasBaseKeySignature) {
    size_ += computeDataSize(5, self.baseKeySignature);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TSProtoKeyExchangeMessage*) parseFromData:(NSData*) data {
  return (TSProtoKeyExchangeMessage*)[[[TSProtoKeyExchangeMessage builder] mergeFromData:data] build];
}
+ (TSProtoKeyExchangeMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoKeyExchangeMessage*)[[[TSProtoKeyExchangeMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TSProtoKeyExchangeMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TSProtoKeyExchangeMessage*)[[[TSProtoKeyExchangeMessage builder] mergeFromInputStream:input] build];
}
+ (TSProtoKeyExchangeMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoKeyExchangeMessage*)[[[TSProtoKeyExchangeMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoKeyExchangeMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TSProtoKeyExchangeMessage*)[[[TSProtoKeyExchangeMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TSProtoKeyExchangeMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoKeyExchangeMessage*)[[[TSProtoKeyExchangeMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoKeyExchangeMessageBuilder*) builder {
  return [[TSProtoKeyExchangeMessageBuilder alloc] init];
}
+ (TSProtoKeyExchangeMessageBuilder*) builderWithPrototype:(TSProtoKeyExchangeMessage*) prototype {
  return [[TSProtoKeyExchangeMessage builder] mergeFrom:prototype];
}
- (TSProtoKeyExchangeMessageBuilder*) builder {
  return [TSProtoKeyExchangeMessage builder];
}
- (TSProtoKeyExchangeMessageBuilder*) toBuilder {
  return [TSProtoKeyExchangeMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasBaseKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseKey", self.baseKey];
  }
  if (self.hasRatchetKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ratchetKey", self.ratchetKey];
  }
  if (self.hasIdentityKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"identityKey", self.identityKey];
  }
  if (self.hasBaseKeySignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseKeySignature", self.baseKeySignature];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TSProtoKeyExchangeMessage class]]) {
    return NO;
  }
  TSProtoKeyExchangeMessage *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasBaseKey == otherMessage.hasBaseKey &&
      (!self.hasBaseKey || [self.baseKey isEqual:otherMessage.baseKey]) &&
      self.hasRatchetKey == otherMessage.hasRatchetKey &&
      (!self.hasRatchetKey || [self.ratchetKey isEqual:otherMessage.ratchetKey]) &&
      self.hasIdentityKey == otherMessage.hasIdentityKey &&
      (!self.hasIdentityKey || [self.identityKey isEqual:otherMessage.identityKey]) &&
      self.hasBaseKeySignature == otherMessage.hasBaseKeySignature &&
      (!self.hasBaseKeySignature || [self.baseKeySignature isEqual:otherMessage.baseKeySignature]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasBaseKey) {
    hashCode = hashCode * 31 + [self.baseKey hash];
  }
  if (self.hasRatchetKey) {
    hashCode = hashCode * 31 + [self.ratchetKey hash];
  }
  if (self.hasIdentityKey) {
    hashCode = hashCode * 31 + [self.identityKey hash];
  }
  if (self.hasBaseKeySignature) {
    hashCode = hashCode * 31 + [self.baseKeySignature hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TSProtoKeyExchangeMessageBuilder()
@property (strong) TSProtoKeyExchangeMessage* result;
@end

@implementation TSProtoKeyExchangeMessageBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TSProtoKeyExchangeMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TSProtoKeyExchangeMessageBuilder*) clear {
  self.result = [[TSProtoKeyExchangeMessage alloc] init];
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) clone {
  return [TSProtoKeyExchangeMessage builderWithPrototype:result];
}
- (TSProtoKeyExchangeMessage*) defaultInstance {
  return [TSProtoKeyExchangeMessage defaultInstance];
}
- (TSProtoKeyExchangeMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TSProtoKeyExchangeMessage*) buildPartial {
  TSProtoKeyExchangeMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TSProtoKeyExchangeMessageBuilder*) mergeFrom:(TSProtoKeyExchangeMessage*) other {
  if (other == [TSProtoKeyExchangeMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasBaseKey) {
    [self setBaseKey:other.baseKey];
  }
  if (other.hasRatchetKey) {
    [self setRatchetKey:other.ratchetKey];
  }
  if (other.hasIdentityKey) {
    [self setIdentityKey:other.identityKey];
  }
  if (other.hasBaseKeySignature) {
    [self setBaseKeySignature:other.baseKeySignature];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TSProtoKeyExchangeMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setBaseKey:[input readData]];
        break;
      }
      case 26: {
        [self setRatchetKey:[input readData]];
        break;
      }
      case 34: {
        [self setIdentityKey:[input readData]];
        break;
      }
      case 42: {
        [self setBaseKeySignature:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (UInt32) id {
  return result.id;
}
- (TSProtoKeyExchangeMessageBuilder*) setId:(UInt32) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasBaseKey {
  return result.hasBaseKey;
}
- (NSData*) baseKey {
  return result.baseKey;
}
- (TSProtoKeyExchangeMessageBuilder*) setBaseKey:(NSData*) value {
  result.hasBaseKey = YES;
  result.baseKey = value;
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) clearBaseKey {
  result.hasBaseKey = NO;
  result.baseKey = [NSData data];
  return self;
}
- (BOOL) hasRatchetKey {
  return result.hasRatchetKey;
}
- (NSData*) ratchetKey {
  return result.ratchetKey;
}
- (TSProtoKeyExchangeMessageBuilder*) setRatchetKey:(NSData*) value {
  result.hasRatchetKey = YES;
  result.ratchetKey = value;
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) clearRatchetKey {
  result.hasRatchetKey = NO;
  result.ratchetKey = [NSData data];
  return self;
}
- (BOOL) hasIdentityKey {
  return result.hasIdentityKey;
}
- (NSData*) identityKey {
  return result.identityKey;
}
- (TSProtoKeyExchangeMessageBuilder*) setIdentityKey:(NSData*) value {
  result.hasIdentityKey = YES;
  result.identityKey = value;
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) clearIdentityKey {
  result.hasIdentityKey = NO;
  result.identityKey = [NSData data];
  return self;
}
- (BOOL) hasBaseKeySignature {
  return result.hasBaseKeySignature;
}
- (NSData*) baseKeySignature {
  return result.baseKeySignature;
}
- (TSProtoKeyExchangeMessageBuilder*) setBaseKeySignature:(NSData*) value {
  result.hasBaseKeySignature = YES;
  result.baseKeySignature = value;
  return self;
}
- (TSProtoKeyExchangeMessageBuilder*) clearBaseKeySignature {
  result.hasBaseKeySignature = NO;
  result.baseKeySignature = [NSData data];
  return self;
}
@end

@interface TSProtoSenderKeyMessage ()
@property UInt32 id;
@property UInt32 iteration;
@property (strong) NSData* ciphertext;
@end

@implementation TSProtoSenderKeyMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasIteration {
  return !!hasIteration_;
}
- (void) setHasIteration:(BOOL) value_ {
  hasIteration_ = !!value_;
}
@synthesize iteration;
- (BOOL) hasCiphertext {
  return !!hasCiphertext_;
}
- (void) setHasCiphertext:(BOOL) value_ {
  hasCiphertext_ = !!value_;
}
@synthesize ciphertext;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.iteration = 0;
    self.ciphertext = [NSData data];
  }
  return self;
}
static TSProtoSenderKeyMessage* defaultTSProtoSenderKeyMessageInstance = nil;
+ (void) initialize {
  if (self == [TSProtoSenderKeyMessage class]) {
    defaultTSProtoSenderKeyMessageInstance = [[TSProtoSenderKeyMessage alloc] init];
  }
}
+ (TSProtoSenderKeyMessage*) defaultInstance {
  return defaultTSProtoSenderKeyMessageInstance;
}
- (TSProtoSenderKeyMessage*) defaultInstance {
  return defaultTSProtoSenderKeyMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasIteration) {
    [output writeUInt32:2 value:self.iteration];
  }
  if (self.hasCiphertext) {
    [output writeData:3 value:self.ciphertext];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasIteration) {
    size_ += computeUInt32Size(2, self.iteration);
  }
  if (self.hasCiphertext) {
    size_ += computeDataSize(3, self.ciphertext);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TSProtoSenderKeyMessage*) parseFromData:(NSData*) data {
  return (TSProtoSenderKeyMessage*)[[[TSProtoSenderKeyMessage builder] mergeFromData:data] build];
}
+ (TSProtoSenderKeyMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoSenderKeyMessage*)[[[TSProtoSenderKeyMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TSProtoSenderKeyMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TSProtoSenderKeyMessage*)[[[TSProtoSenderKeyMessage builder] mergeFromInputStream:input] build];
}
+ (TSProtoSenderKeyMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoSenderKeyMessage*)[[[TSProtoSenderKeyMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoSenderKeyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TSProtoSenderKeyMessage*)[[[TSProtoSenderKeyMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TSProtoSenderKeyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoSenderKeyMessage*)[[[TSProtoSenderKeyMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoSenderKeyMessageBuilder*) builder {
  return [[TSProtoSenderKeyMessageBuilder alloc] init];
}
+ (TSProtoSenderKeyMessageBuilder*) builderWithPrototype:(TSProtoSenderKeyMessage*) prototype {
  return [[TSProtoSenderKeyMessage builder] mergeFrom:prototype];
}
- (TSProtoSenderKeyMessageBuilder*) builder {
  return [TSProtoSenderKeyMessage builder];
}
- (TSProtoSenderKeyMessageBuilder*) toBuilder {
  return [TSProtoSenderKeyMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasIteration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iteration", [NSNumber numberWithInteger:self.iteration]];
  }
  if (self.hasCiphertext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciphertext", self.ciphertext];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TSProtoSenderKeyMessage class]]) {
    return NO;
  }
  TSProtoSenderKeyMessage *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasIteration == otherMessage.hasIteration &&
      (!self.hasIteration || self.iteration == otherMessage.iteration) &&
      self.hasCiphertext == otherMessage.hasCiphertext &&
      (!self.hasCiphertext || [self.ciphertext isEqual:otherMessage.ciphertext]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasIteration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.iteration] hash];
  }
  if (self.hasCiphertext) {
    hashCode = hashCode * 31 + [self.ciphertext hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TSProtoSenderKeyMessageBuilder()
@property (strong) TSProtoSenderKeyMessage* result;
@end

@implementation TSProtoSenderKeyMessageBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TSProtoSenderKeyMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TSProtoSenderKeyMessageBuilder*) clear {
  self.result = [[TSProtoSenderKeyMessage alloc] init];
  return self;
}
- (TSProtoSenderKeyMessageBuilder*) clone {
  return [TSProtoSenderKeyMessage builderWithPrototype:result];
}
- (TSProtoSenderKeyMessage*) defaultInstance {
  return [TSProtoSenderKeyMessage defaultInstance];
}
- (TSProtoSenderKeyMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TSProtoSenderKeyMessage*) buildPartial {
  TSProtoSenderKeyMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TSProtoSenderKeyMessageBuilder*) mergeFrom:(TSProtoSenderKeyMessage*) other {
  if (other == [TSProtoSenderKeyMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasIteration) {
    [self setIteration:other.iteration];
  }
  if (other.hasCiphertext) {
    [self setCiphertext:other.ciphertext];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TSProtoSenderKeyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TSProtoSenderKeyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIteration:[input readUInt32]];
        break;
      }
      case 26: {
        [self setCiphertext:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (UInt32) id {
  return result.id;
}
- (TSProtoSenderKeyMessageBuilder*) setId:(UInt32) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TSProtoSenderKeyMessageBuilder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasIteration {
  return result.hasIteration;
}
- (UInt32) iteration {
  return result.iteration;
}
- (TSProtoSenderKeyMessageBuilder*) setIteration:(UInt32) value {
  result.hasIteration = YES;
  result.iteration = value;
  return self;
}
- (TSProtoSenderKeyMessageBuilder*) clearIteration {
  result.hasIteration = NO;
  result.iteration = 0;
  return self;
}
- (BOOL) hasCiphertext {
  return result.hasCiphertext;
}
- (NSData*) ciphertext {
  return result.ciphertext;
}
- (TSProtoSenderKeyMessageBuilder*) setCiphertext:(NSData*) value {
  result.hasCiphertext = YES;
  result.ciphertext = value;
  return self;
}
- (TSProtoSenderKeyMessageBuilder*) clearCiphertext {
  result.hasCiphertext = NO;
  result.ciphertext = [NSData data];
  return self;
}
@end

@interface TSProtoSenderKeyDistributionMessage ()
@property UInt32 id;
@property UInt32 iteration;
@property (strong) NSData* chainKey;
@property (strong) NSData* signingKey;
@end

@implementation TSProtoSenderKeyDistributionMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasIteration {
  return !!hasIteration_;
}
- (void) setHasIteration:(BOOL) value_ {
  hasIteration_ = !!value_;
}
@synthesize iteration;
- (BOOL) hasChainKey {
  return !!hasChainKey_;
}
- (void) setHasChainKey:(BOOL) value_ {
  hasChainKey_ = !!value_;
}
@synthesize chainKey;
- (BOOL) hasSigningKey {
  return !!hasSigningKey_;
}
- (void) setHasSigningKey:(BOOL) value_ {
  hasSigningKey_ = !!value_;
}
@synthesize signingKey;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.iteration = 0;
    self.chainKey = [NSData data];
    self.signingKey = [NSData data];
  }
  return self;
}
static TSProtoSenderKeyDistributionMessage* defaultTSProtoSenderKeyDistributionMessageInstance = nil;
+ (void) initialize {
  if (self == [TSProtoSenderKeyDistributionMessage class]) {
    defaultTSProtoSenderKeyDistributionMessageInstance = [[TSProtoSenderKeyDistributionMessage alloc] init];
  }
}
+ (TSProtoSenderKeyDistributionMessage*) defaultInstance {
  return defaultTSProtoSenderKeyDistributionMessageInstance;
}
- (TSProtoSenderKeyDistributionMessage*) defaultInstance {
  return defaultTSProtoSenderKeyDistributionMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasIteration) {
    [output writeUInt32:2 value:self.iteration];
  }
  if (self.hasChainKey) {
    [output writeData:3 value:self.chainKey];
  }
  if (self.hasSigningKey) {
    [output writeData:4 value:self.signingKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasIteration) {
    size_ += computeUInt32Size(2, self.iteration);
  }
  if (self.hasChainKey) {
    size_ += computeDataSize(3, self.chainKey);
  }
  if (self.hasSigningKey) {
    size_ += computeDataSize(4, self.signingKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TSProtoSenderKeyDistributionMessage*) parseFromData:(NSData*) data {
  return (TSProtoSenderKeyDistributionMessage*)[[[TSProtoSenderKeyDistributionMessage builder] mergeFromData:data] build];
}
+ (TSProtoSenderKeyDistributionMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoSenderKeyDistributionMessage*)[[[TSProtoSenderKeyDistributionMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TSProtoSenderKeyDistributionMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TSProtoSenderKeyDistributionMessage*)[[[TSProtoSenderKeyDistributionMessage builder] mergeFromInputStream:input] build];
}
+ (TSProtoSenderKeyDistributionMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoSenderKeyDistributionMessage*)[[[TSProtoSenderKeyDistributionMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoSenderKeyDistributionMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TSProtoSenderKeyDistributionMessage*)[[[TSProtoSenderKeyDistributionMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TSProtoSenderKeyDistributionMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TSProtoSenderKeyDistributionMessage*)[[[TSProtoSenderKeyDistributionMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TSProtoSenderKeyDistributionMessageBuilder*) builder {
  return [[TSProtoSenderKeyDistributionMessageBuilder alloc] init];
}
+ (TSProtoSenderKeyDistributionMessageBuilder*) builderWithPrototype:(TSProtoSenderKeyDistributionMessage*) prototype {
  return [[TSProtoSenderKeyDistributionMessage builder] mergeFrom:prototype];
}
- (TSProtoSenderKeyDistributionMessageBuilder*) builder {
  return [TSProtoSenderKeyDistributionMessage builder];
}
- (TSProtoSenderKeyDistributionMessageBuilder*) toBuilder {
  return [TSProtoSenderKeyDistributionMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasIteration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iteration", [NSNumber numberWithInteger:self.iteration]];
  }
  if (self.hasChainKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chainKey", self.chainKey];
  }
  if (self.hasSigningKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signingKey", self.signingKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TSProtoSenderKeyDistributionMessage class]]) {
    return NO;
  }
  TSProtoSenderKeyDistributionMessage *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasIteration == otherMessage.hasIteration &&
      (!self.hasIteration || self.iteration == otherMessage.iteration) &&
      self.hasChainKey == otherMessage.hasChainKey &&
      (!self.hasChainKey || [self.chainKey isEqual:otherMessage.chainKey]) &&
      self.hasSigningKey == otherMessage.hasSigningKey &&
      (!self.hasSigningKey || [self.signingKey isEqual:otherMessage.signingKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasIteration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.iteration] hash];
  }
  if (self.hasChainKey) {
    hashCode = hashCode * 31 + [self.chainKey hash];
  }
  if (self.hasSigningKey) {
    hashCode = hashCode * 31 + [self.signingKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TSProtoSenderKeyDistributionMessageBuilder()
@property (strong) TSProtoSenderKeyDistributionMessage* result;
@end

@implementation TSProtoSenderKeyDistributionMessageBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TSProtoSenderKeyDistributionMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) clear {
  self.result = [[TSProtoSenderKeyDistributionMessage alloc] init];
  return self;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) clone {
  return [TSProtoSenderKeyDistributionMessage builderWithPrototype:result];
}
- (TSProtoSenderKeyDistributionMessage*) defaultInstance {
  return [TSProtoSenderKeyDistributionMessage defaultInstance];
}
- (TSProtoSenderKeyDistributionMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TSProtoSenderKeyDistributionMessage*) buildPartial {
  TSProtoSenderKeyDistributionMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) mergeFrom:(TSProtoSenderKeyDistributionMessage*) other {
  if (other == [TSProtoSenderKeyDistributionMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasIteration) {
    [self setIteration:other.iteration];
  }
  if (other.hasChainKey) {
    [self setChainKey:other.chainKey];
  }
  if (other.hasSigningKey) {
    [self setSigningKey:other.signingKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TSProtoSenderKeyDistributionMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIteration:[input readUInt32]];
        break;
      }
      case 26: {
        [self setChainKey:[input readData]];
        break;
      }
      case 34: {
        [self setSigningKey:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (UInt32) id {
  return result.id;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) setId:(UInt32) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasIteration {
  return result.hasIteration;
}
- (UInt32) iteration {
  return result.iteration;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) setIteration:(UInt32) value {
  result.hasIteration = YES;
  result.iteration = value;
  return self;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) clearIteration {
  result.hasIteration = NO;
  result.iteration = 0;
  return self;
}
- (BOOL) hasChainKey {
  return result.hasChainKey;
}
- (NSData*) chainKey {
  return result.chainKey;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) setChainKey:(NSData*) value {
  result.hasChainKey = YES;
  result.chainKey = value;
  return self;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) clearChainKey {
  result.hasChainKey = NO;
  result.chainKey = [NSData data];
  return self;
}
- (BOOL) hasSigningKey {
  return result.hasSigningKey;
}
- (NSData*) signingKey {
  return result.signingKey;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) setSigningKey:(NSData*) value {
  result.hasSigningKey = YES;
  result.signingKey = value;
  return self;
}
- (TSProtoSenderKeyDistributionMessageBuilder*) clearSigningKey {
  result.hasSigningKey = NO;
  result.signingKey = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
